//10-并查集

//A
#include<bits/stdc++.h>
using namespace std;
const int N=1e5+10;
int S[N];
void init(int n){
    for(int i=1;i<=n;i++) S[i]=i;
}
int find_set(int x){
    if(x!=S[x]) S[x]=find_set(S[x]);
    return S[x];
}
void merge_set(int u,int v){
    u=find_set(u); v=find_set(v);
    if(u!=v) S[u]=S[v];
}
int main(){
    int n,m; cin>>n>>m;
    init(n);
    for(int i=1,z,x,y;i<=m;i++){
        cin>>z>>x>>y;
        if(z==1) merge_set(x,y);
        else{
            x=find_set(x); y=find_set(y);
            if(S[x]==S[y]) cout<<"Y\n";
            else cout<<"N\n";
        }
    }
    return 0;
}

//B
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> PII;
const int INF=0x3f3f3f3f;
const int N=3e4+10;
int S[N]={0},dis[N]={0},len[N]={0};
int find_set(int x){
    if(x!=S[x]){
        int temp=S[x];
        S[x]=find_set(S[x]);
        dis[x]+=dis[temp];
    }
    return S[x];
}
void merge_set(int u,int v){
    u=find_set(u); v=find_set(v);
    S[u]=v;
    dis[u]+=len[v];
    len[v]+=len[u];
}
int main(){
    int T; cin>>T;
    for(int i=1;i<=T;i++){
        S[i]=i; len[i]=1;
    }
    while(T--){
        string str; int i,j; cin>>str>>i>>j;
        if(str=="M") merge_set(i,j);
        else{
            i=find_set(i); j=find_set(j);
            if(S[i]==S[j]) cout<<max(abs(dis[i]-dis[j])-1,0);
            else cout<<-1;
        }
    }
    return 0;
}

//C
#include<bits/stdc++.h>
using namespace std;
const int N=1010;
int S[N*N]={0};
int find_set(int x){
    if(x!=S[x]) S[x]=find_set(S[x]);
    return S[x];
}
void merge_set(int u,int v){
    u=find_set(u); v=find_set(v);
    if(u!=v) S[u]=v;
}
set<int>s;
int main(){
    int n,m; cin>>n>>m;
    int k; cin>>k;
    for(int i=1;i<=n*m;i++) S[i]=i;
    for(int i=1;i<=k;i++){
        int a,b; cin>>a>>b;
        merge_set(a,b);
    }
    for(int i=1;i<=m*n;i++) s.insert(find_set(i));
    cout<<s.size();
    return 0;
}

//D
#include<bits/stdc++.h>
using namespace std;
const int N=1e6+10;
int S[N]={0};
int find_set(int x){
    if(x!=S[x]) S[x]=find_set(S[x]);
    return S[x];
}
void merge_set(int u,int v){
    u=find_set(u); v=find_set(v);
    if(u!=v) S[u]=v;
}
bool vis[N]={false};
vector<int>vec;
int main(){
    int n; cin>>n;
    for(int i=1;i<N;i++){
        S[i]=i; vis[i]=true;
    }
    for(int i=1,temp;i<=n;i++){
        cin>>temp;
        if(vis[temp]){
            vec.push_back(temp);
            vis[temp]=false;
        }
        else{
            while(1){
                merge_set(temp,find_set(temp)+1);
                temp=find_set(temp);
                if(vis[temp]){
                    vec.push_back(temp);
                    vis[temp]=false;
                    break;
                }
            }
        }
    }
    for(auto i:vec) cout<<i<<" ";
    return 0;
}
