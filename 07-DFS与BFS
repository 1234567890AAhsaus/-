//07-DFSä¸ŽBFS

//A
#include<bits/stdc++.h>
using namespace std;
int n,sum,ans[5][105],num[105],vis[5][105];
void dfs(int now){
    if(now==n){
        sum++;
        if(sum>=4) return;
        for(int i=1;i<=n;i++){
            ans[num][i]=num[i];
        }
        return;
    }
    for(int i=1;i<=n;i++){
        if(vis[1][i]||vis[2][i-(now+1)+n]||vis[3][i+(now+1)]) continue;
        vis[1][i]=vis[2][i-(now+1)+n]=vis[3][i+(now+1)]=1;
        num[now+1]=i;
        dfs(now+1);
        vis[1][i]=vis[2][i-(now+1)+n]=vis[3][i+(now+1)]=0;
    }
}
int main(){
    cin>>n;
    dfs(0);
    for(int i=1;i<=3;i++){
        for(int j=1;j<=n;j++){
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<sum;
    return 0;
}

//B
#include<bits/stdc++.h>
using namespace std;
int n,a[1005][1005];
queue<pair<int,int>>q;
int vis[1005][1005];
int dx[4][2]={{0,1},{0,-1},{1,0},{-1,0}};
void bfs(){
    while(!q.empty()){
        int x=q.front().first;
        int y=q.front().second;
        a[x][y]=-1;
        vis[x][y]=1;
        q.pop();
        for(int i=0;i<=3;i++){
            int nux=x+dx[i][0];
            int nuy=y+dx[i][1];
            if(nux<1||nux>n||nuy<1||nuy>n||vis[nux][nuy]==1) continue;
            if(a[nux][nuy]==0) q.push(make_pair(nux,nuy));
        }
    }
}
int main(){
    cin>>n;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            cin>>a[i][j];
        }
    }
    for(int i=1;i<=n;i++){
        if(a[i][1]==0){
            q.push(make_pair(i,1));
        }
        if(a[i][n]==0){
            q.push(make_pair(i,n));
        }
        if(a[1][i]==0){
            q.push(make_pair(1,i));
        }
        if(a[n][i]==0){
            q.push(make_pair(n,i));
        }
        bfs();
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(a[i][j]==0) a[i][j]=2;
            if(a[i][j]==-1) a[i][j]=0;
            cout<<a[i][j]<<" ";
        }
        cout<<endl;
    }
}


//C
#include<bits/stdc++.h>
using namespace std;
int n,m,xx,yy;
queue<pair<int,int>>q;
int vis[1005][1005];
int fx[16]={2,-2,2,-2,-1,-1,1,1},fy[16]={1,1,-1,-1,2,-2,2,-2};
void bfs(){
    while(!q.empty()){
        int x=q.front().first;
        int y=q.front().second;
        q.pop();
        for(int i=0;i<=7;i++){
            int nux=x+fx[i];
            int nuy=y+fy[i];
            if(nux<1||nux>n||nuy<1||nuy>n) continue;
            if(vis[nux][nuy]==-1){
                vis[nux][nuy]=vis[x][y]+1;
                q.push(make_pair(nux,nuy));
            }
        }
    }
}
int main(){
    cin>>n>>m>>xx>>yy;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            vis[i][j]=-1;
        }
    }
    vis[xx][yy]=0;
    q.push(make_pair(xx,yy));
    bfs();
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            printf("%-5d",vis[i][j]);
        }
        printf("\n");
    }
    return 0;
}

//D
#include<bits/stdc++.h>
using namespace std;
char s[105][105];
int n,m;
int vis[105][105],mp[105][105];
int d[4][2]={{0,1},{0,-1},{1,0},{-1,0}};
void dfs(int x,int y){
    if(x>n||y>m||x<1||y<1) return;
    for(int i=0;i<=3;i++){
        int dx=x+d[i][0];
        int dy=y+d[i][1];
        if(vis[dx][dy]||mp[dx][dy]==0) continue
        vis[dx][dy]=1;
        dfs(dx,dy);
    }
}
int main(){
    cin>>n>>m;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(s[i][j]=='0') mp[i+1][j+1]=0;
            else mp[i+1][j+1]=1;
        }
    }
    int cnt=0;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(mp[i][j]==0&&vis[i][j]) continue;
                cnt++;
                vis[i][j]=1;
                dfs(i,j);
        }
    }
    cout<<cnt;
    return 0;
}

//E
#include<bits/stdc++.h>
using namespace std;
int n,r;
int ans[10005],vis[10005];
void dfs(int now,int sum){
    if(now==n+1){
        if(sum==r){
            for(int i=1;i<=r;i++){
                cout<<setw(3)<<ans[i]<<endl;
            }
            return;
        }else{
            return;
        }
    }
    if(sum>r) return;
    ans[sum+1]=now;
    dfs(now+1,sum+1);
    dfs(now+1,sum);
}
int main(){
    cin>>n>>r;
    dfs(1,0);
    return 0;
}

//F
#include<bits/stdc++.h>
using namespace std;
int n,a,b;
int k[100005];
struct node{
    int step;
    int num;
}
queue<node>q;
int vis[100005];
int main(){
    cin>>n>>a>>b;
    for(int i=1;i<=n;i++){
        cin>>k[i];
    }
    node start;
    start.step=0;
    start.num=a;
    q.push(start);
    while(!q.empty()){
        node u=q.front();
        q.pop();
        if(vis[u.num]==1) continue;
        vis[u.num]=1;
        if(u.num==b){
            cout<<u.step;
            return 0;
        }
        if(!vis[u.num+k[u.num]]&&u.num+k[u.num]<=n){
            node now;
            now.step=u.step+1;
            now.num=u.num+k[u.num];
            vis[now.num]=1;
            q.push(now);
        }
        if(!vis[u.num-k[u.num]]&&u.num-k[u.num]>0){
            node now;
            now.step=u.step+1;
            now.num=u.num-k[u.num];
            vis[now.num]=1;
            q.push(now);
        }
    }
    cout<<-1;
    return 0;   
}

//G
#include<bits/stdc++.h>
using namespace std;
struct node{
    int s,b;
}a[10005];
int ans=2147483647,n;
void dfs(int now,int sum,int s_num,int b_num){
    if(now==n+1){
        if(sum>=1){
            ans=min(abs(s_num-b_num),ans);
        }
        return;
    }
    dfs(now+1,sum,s_num,b_num);
    dfs(now+1,sum+1,s_num*a[now].s,b_num+a[now].b);
}
int main(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>a[i].s>>a[i].b;
    }
    dfs(1,0,1,0);
    cout<<ans;
    return 0;
}

//H
#include<bits/stdc++.h>
using namespace std;
int n;
struct node{
    int x,y;
}s[1000005];
bool f[100005];
int ans=0;
void dfs(int now){
    if(now==n){
        ans++;
        return;
    }
    int flag=0;
    if(!f[s[now+1].x]){
        flag=1;
        f[s[now+1].x]=true;
        dfs(now+1);
        f[s[now+1].x]=false;
    }
    if(!f[s[now+1].y]){
        flag=1;
        f[s[now+1].y]=1;
        dfs(now+1);
        f[s[now+1].y]=false;
    }
    if(flag==0)
    return;
}
int main(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>s[i].x>>s[i].y;
    }
    dfs(0);
    cout<<ans;
    return 0;
}

//I
#include<bits/stdc++.h>
using namespace std;
int ans=0;
void dfs(int x,int score,int k){
    if(k==0) score=0;
    else{
        score+=10;
        if(score==100) return;
    }
    if(score==70) ans++;
    if(x==30) return;
    dfs(x+1,score,0);
    dfs(x+1,score,1);
}
int main(){
    dfs(0,0,0);
    cout<<ans;
}

//J
#include<bits/stdc++.h>
using namespace std;
int op[11]; int a[5][5];
int ans;
int OP(int a,int b,int c){
    if(c==1) return a|b;
    if(c==2) return a*b;
    return a^b;
}
void dfs(int n){
    if(n==10){
        int c=0;
        a[0][0]=1,a[0][1]=1,a[0][2]=1,a[0][3]=1,a[0][3]=0,a[0][4]=0;
        for(int i=1;i<=4;i++){
            for(int j=0;j<=4-i;j++){
                a[i][j]=OP(a[i-1][j],a[i-1][j+1],op[i]);
            }
        }
    }
    for(int i=1;i<=3;i++){
        op[n]=i;
        dfs(n+1);
    }
}
int main(){
    dfs(0);
    cout<<ans;
    return 0;
}
