//11-拓扑排序和最小生成树

//A
#include<bits/stdc++.h>
using namespace std;
const int N=1e5+10;
struct Edge{
    int to,nxt;
}edge[N<<1];
int head[N]={0},cnt=0,degree[N]={0};
void add_edge(int u,int v){
    edge[cnt].to=v; edge[cnt].nxt=head[u]; head[u]=cnt++;
    degree[u]++;
}
queue<int>q;
int main(){
    int n; cin>>n;
    for(int i=1;i<=n;i++) head[i]=-1;
    for(int i=0;i<=n;i++) edge[i].nxt=-1;
    for(int i=1,a,b;i<=n;i++){
        cin>>a>>b;
        add_edge(a,b); add_edge(b,a);
    }
    for(int i=1;i<=n;i++){
        if(degree[i]==1) q.push(i);
    }
    while(q.size()){
        int now=q.front(); q.pop();
        --degree[now];
        for(int i=head[now];~i;i=edge[i].nxt){
            int v=edge[i].to;
            --degree[v];
            if(degree[v]==1) q.push(v);
        }
    }
    for(int i=1;i<=n;i++){
        if(degree[i]>1) cout<<i<<" ";
    }
    return 0;
}

//B
#include<bits/stdc++.h>
using namespace std;
const int N=5e3+10,M=5e5+10;
const int mod=80112002;
struct Edge{
    int to,nxt;
}edge[M];
int head[N]={0},cnt=0,in_degree[N]={0},out_degree[N]={0};
void add_edge(int u,int v){
    edge[cnt].to=v; edge[cnt].nxt=head[u]; head[u]=cnt++;
    in_degree[v]++; out_degree[u]++;
}
queue<int>q;
set<int>st;
int sum[N]={0};
int main(){
    int n,m; cin>>n>>m;
    for(int i=1;i<=n;i++) head[i]=-1;
    for(int i=0;i<=n;i++) edge[i].nxt=-1;
    for(int i=1,a,b;i<=m;i++){
        cin>>a>>b;
        add_edge(a,b);
    }
    for(int i=1;i<=n;i++){
        if(!in_degree[i]){
            q.push(i); sum[i]=1;
        }
        if(!out_degree[i]) st.insert(i);
    }
    while(q.size()){
        int now=q.front(); q.pop();
        st.insert(now);
        for(int i=head[now];~i;i=edge[i].nxt){
            int v=edge[i].to;
            sum[v]=(sum[v]+sum[now])%mod;
            --in_degree[v]==1;
            if(!in_degree[v]) q.push(v);
        }
    }
    int res=0;
    for(auto i:st) res=(res+sum[i])%mod;
    cout<<res;
    return 0;
}

//C
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> PII;
const int N=510,M=510*510,INF=0x3f3f3f3f;
int s,p;
int S[N]={0};
int find_set(int x){
    if(x!=S[x]) S[x]=find_set(S[x]);
    return S[x];
}
int cnt=0;
struct node{
    int u,v; double w;
    bool operator < (const node &a)const{
        return w>a.w;
    }
}edge[M];
void Kruskal(){
    sort(edge,edge+cnt);
    for(int i=1;i<=p;i++) S[i]=i;
    int tot=0;
    double res=0;
    for(int i=0;i<cnt;i++){
        if(tot==p-s) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res=edge[i].w;
        ++tot;
        S[a]=b;
    } 
    printf("%.2f",res);
}
pair<int,int>PII;
int main(){
    cin>>s>>p;
    for(int i=1;i<=p;i++){
        cin>>edge[i].y>>edge[i].x;
    }
    for(int i=1;i<=p;i++){
        for(int j=i+1;j<=p;j++){
            edge[cnt].u=i; edge[cnt].v=j;
            edge[cnt++].w=sqrt((coo[i].x-coo[j].x)*(coo[i].x-coo[j].x)+(coo[i].y-coo[j].y)*(coo[i].y-coo[j].y));
        }
    }
    Kruskal();
    return 0;
}

//D
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=2e5+10,M=1e5+10,INF=0x3f3f3f3f;
int n,m;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
struct node{
    int u,v,w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];
int sum=0;
void Kruskal(){
    sort(edge+1,edge+n+1);
    for(int i=1;i<=n;i++) S[i]=i;
    int res=0,tot=0;
    for(int i=1;i<=m;i++){
        if(tot==n-1) break;
        a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res+=edge[i].w;
        tot++;
        S[a]=b;
    }
    cout<<sum-res;
    return;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++){
        cin>>edge[i].u>>edge[i].v>>edge[i].w;
        sum+=edge[i].w;
        if(!edge[i].w) edge[i].w=INF;
    }
    Kruskal();
    return 0;
}

//E
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=2e3+5,M=1e4+5,INF=0x3f3f3f3f;
int n,m;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
struct node{
    int u,v,w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];

void Kruskal(){
    sort(edge+1,edge+m+1);
    for(int i=1;i<=n;i++) S[i]=i;
    int tot=0,res=0;
    for(int i=1;i<=m;i++){
        if(tot==n-1) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res=edge[i].w;
        tot++;
        S[a]=b;
    }
    cout<<res;
    return;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++) cin>>edge[i].u>>edge[i].v>>edge[i].w;
    Kruskal();
    return 0;
}

//F
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=1e5+10,M=1e5+10,INF=0x3f3f3f3f;
int n,m;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
struct node{
    int u,v,w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];
void Kruskal(){
    sort(edge+1,edge+m+1);
    for(int i=1;i<=n;i++) S[i]=i;
    int tot=0,res=0;
    for(int i=1;i<=m;i++){
        if(tot==n-1) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res=edge[i].w;
        ++tot;
        S[a]=b;
    }
    cout<<res<<endl;
    return;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++) cin>>edge[i].u>>edge[i].v>>edge[i].w;
    Kruskal();
    return 0;
}

//G
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=1e3+10,M=N*N,INF=0x3f3f3f3f;
int n,k;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
int cnt=0;
struct node{
    int u,v; double w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];
pair<double,double>coo[N];
void Kruskal(){
    sort(edge,edge+cnt);
    for(int i=1;i<=n;i++) S[i]=i;
    int tot=0;
    for(int i=1;i<=cnt;i++){
        if(tot==n-k) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        if(tot==n-k){
            printf("%.2f",edge[i].w);
            return;
        }
        ++tot;
        S[a]=b;
    }
    cout<<0;
    return;
}
int main(){
    cin>>n>>k;
    for(int i=1;i<=n;i++){
        cin>>coo[i].y>>coo[i].x;
    }
    for(int i=1;i<=n;i++){
        for(int j=i+1;j<=n;j++){
            edge[cnt].u=i; edge[cnt].v=j;
            edge[cnt++].w=sqrt((coo[i].x-coo[j].x)*(coo[i].x-coo[j].x)+(coo[i].y-coo[j].y)*(coo[i].y-coo[j].y));
        }
    }
    Kruskal();
    return 0;
}

//H
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=1e5+10;
struct Edge{
    int to,nxt;
}edge[N<<1];
int head[N]={0},cnt=0,in_degree[N]={0};
void add_edge(int u,int v){
    edge[cnt].to=v; edge[cnt].nxt=head[u]; head[u]=cnt++;
    in_degree[v]++;
}
queue<int>q;
int res[N]={0};
int main(){
    int n,m; cin>>n>>m;
    for(int i=1;i<n;i++) head[i]=-1;
    for(int i=0;i<=m;i++) edge[i].nxt=-1;
    for(int i=1,a,b;i<=m;i++){
        cin>>a>>b;
        add_edge(a,b);
    }
    for(int i=1;i<=n;i++){
        if(!in_degree) {q.push(i); res[i]=1;}
    }
    while(q.size()){
        int now=q.front(); q.pop();
        int nxt_step=res[now]+1;
        for(int i=head[now];~i;i=edge[i].nxt){
            int nxt=edge[i].to;
            --in_degree[nxt];
        }
        if(!in_degree[nxt]){
            q.push(nxt);
            res[nxt]=nxt_step;        
        }
    }
    for(int i=1;i<=n;i++) cout<<res[i]<<" ";
    return 0;
}
