01-C++基础

//A
#include<bits/stdc++.h>
using namespace std;
int main(){
    int a,b,c; cin>>a>>b>>c;
    cout<<a*0.2+b*0.3+c*0.5;
    return 0;
}

//B
#include<bits/stdc++.h>
using namespace std;
int main(){
    int a,b,res=0,maxn=0;
    for(int i=1;i<=7;i++){
        cin>>a>>b;
        if(a+b>8&&a+b>maxn){
            res=i; maxn=a+b;
        }
    }
    cout<<res;
    return 0;
}

//C
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n; cin>>n;
    int res=0;
    int mid=n&1?n/2+1:n/2;
    for(int i=1;i<=n;i++){
        if((i*i)%n<mid) res++;
    }
    cout<<res;
    return 0;
}

//D
#include<bits/stdc++.h>
using namespace std;
bool check(int n){
    while(n){
        int temp=n%10;
        switch(temp){
            case 0: case 1: case 2: case 9:
            return true;
        }
        n/=10;
    }
    return false;
}
int main(){
    int n; cin>>n;
    long long sum=0;
    for(int i=1;i<=n;i++){
        if(check(i)) sum+=i;
    }
    cout<<sum<<endl;
    return 0;
}

//E
#include<bits/stdc++.h>
using namespace std;
int main(){
    string s; cin>>s;
    int day=(s[3]-'0')*10+s[4]-'0', month;
    switch(s[0]){
        case 'J':
            if(s[1]=='a') month=1;
            else if(s[2]=='n') month=6;
            else month=7;
            break;
        case 'F':
            month=2; break;
        case 'M':
            if(s[2]=='r') month=3;
            else month=5;
            break;
        case 'A':
            if(s[1]=='p') month=4;
            else month=8;
            break;
        case 'S':
            month=9; break;
        case 'O':
            month=10; break;
        case 'N':
            month=11; break;
        case 'D':
            month=12; break;       
    }
    cout<<month<<" "<<day;
    return 0;
}

//F
#include<bits/stdc++.h>
using namespace std;
int main(){
    string s; cin>>s;
    for(int i=0;i<s.size();i++){
        if(s[i]>='a'&&s[i]<='z') s[i]-=32;
    }
    cout<<s;
    return 0;
}

//G
#include<bits/stdc++.h>
using namespace std;
int main(){
    int L,R; cin>>L>>R;
    int res=(R+1)/2;
    res+=R/4;
    res-=L/2;
    res-=(L-1)/4;
    cout<<res;
    return 0;
}

//H
#include<bits/stdc++.h>
using namespace std;
inline int read(){
    register int x=0,f=1;
    register char c=getchar();
    while(c<'0'||c>'9') {if(c=='-') f=-1; c=getchar();}
    while(c>='0'&&c<='9') {x=(x<<1)+(x<<3)+(c^48); c=getchar();}
    return x*f;
}
struct node{
    int y,m,d;
}res[3];
bool cmp(node a,node b){
    if(a.y!=b.y) return a.y<b.y;
    if(a.m!=b.m) return a.m<b.m;
    return a.d<b.d;
}
bool check(int yy,int mm,int dd){
    if(mm>12||dd>31||mm<1||dd<1) return false;
    switch(mm){
        case 2:
            int temp;
            if(yy>60) temp=1900+yy;
            else temp=2000+yy;
            if(temp%4==0){
                if(dd>29) return false;
            }
            else if(dd>28) return false;
            break;
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            if(dd>31) return false;
            break;
        case 4: case 6: case 9: case 11:
            if(dd>30) return false;
            break;
    }
}
int cnt=0;
void add_data(int a,int b,int c){
    if(check(a,b,c)){
        res[cnt].m=b; res[cnt].d=c;
        if(a>=60) res[cnt].y=1900+a;
        else res[cnt].y=2000+a;
        cnt++;
    }
}
int flag[3]={false};
int main(){
    int a,b,c;
    a=read(); b=read(); c=read();
    add_data(a,b,c); add_data(c,a,b); add_data(c,b,a);
    sort(res+0,res+cnt,cmp);
    for(int i=1;i<cnt;i++){
        if(res[i].y==res[i-1].y&&res[i].m==res[i-1].m&&res[i].d==res[i-1].d)
            flag[i]=true;
    }
    for(int i=0;i<cnt;i++){
        if(flag[i]) continue;
        printf("%d-",res[i].y);
        if(res[i].m<10) printf("0");
        printf("%d-",res[i].m);
        if(res[i].d<10) printf("0");
        printf("%d\n",res[i].d);
    }
    return 0;
}

          




//11-拓扑排序和最小生成树

//A
#include<bits/stdc++.h>
using namespace std;
const int N=1e5+10;
struct Edge{
    int to,nxt;
}edge[N<<1];
int head[N]={0},cnt=0,degree[N]={0};
void add_edge(int u,int v){
    edge[cnt].to=v; edge[cnt].nxt=head[u]; head[u]=cnt++;
    degree[u]++;
}
queue<int>q;
int main(){
    int n; cin>>n;
    for(int i=1;i<=n;i++) head[i]=-1;
    for(int i=0;i<=n;i++) edge[i].nxt=-1;
    for(int i=1,a,b;i<=n;i++){
        cin>>a>>b;
        add_edge(a,b); add_edge(b,a);
    }
    for(int i=1;i<=n;i++){
        if(degree[i]==1) q.push(i);
    }
    while(q.size()){
        int now=q.front(); q.pop();
        --degree[now];
        for(int i=head[now];~i;i=edge[i].nxt){
            int v=edge[i].to;
            --degree[v];
            if(degree[v]==1) q.push(v);
        }
    }
    for(int i=1;i<=n;i++){
        if(degree[i]>1) cout<<i<<" ";
    }
    return 0;
}

//B
#include<bits/stdc++.h>
using namespace std;
const int N=5e3+10,M=5e5+10;
const int mod=80112002;
struct Edge{
    int to,nxt;
}edge[M];
int head[N]={0},cnt=0,in_degree[N]={0},out_degree[N]={0};
void add_edge(int u,int v){
    edge[cnt].to=v; edge[cnt].nxt=head[u]; head[u]=cnt++;
    in_degree[v]++; out_degree[u]++;
}
queue<int>q;
set<int>st;
int sum[N]={0};
int main(){
    int n,m; cin>>n>>m;
    for(int i=1;i<=n;i++) head[i]=-1;
    for(int i=0;i<=n;i++) edge[i].nxt=-1;
    for(int i=1,a,b;i<=m;i++){
        cin>>a>>b;
        add_edge(a,b);
    }
    for(int i=1;i<=n;i++){
        if(!in_degree[i]){
            q.push(i); sum[i]=1;
        }
        if(!out_degree[i]) st.insert(i);
    }
    while(q.size()){
        int now=q.front(); q.pop();
        st.insert(now);
        for(int i=head[now];~i;i=edge[i].nxt){
            int v=edge[i].to;
            sum[v]=(sum[v]+sum[now])%mod;
            --in_degree[v]==1;
            if(!in_degree[v]) q.push(v);
        }
    }
    int res=0;
    for(auto i:st) res=(res+sum[i])%mod;
    cout<<res;
    return 0;
}

//C
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> PII;
const int N=510,M=510*510,INF=0x3f3f3f3f;
int s,p;
int S[N]={0};
int find_set(int x){
    if(x!=S[x]) S[x]=find_set(S[x]);
    return S[x];
}
int cnt=0;
struct node{
    int u,v; double w;
    bool operator < (const node &a)const{
        return w>a.w;
    }
}edge[M];
void Kruskal(){
    sort(edge,edge+cnt);
    for(int i=1;i<=p;i++) S[i]=i;
    int tot=0;
    double res=0;
    for(int i=0;i<cnt;i++){
        if(tot==p-s) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res=edge[i].w;
        ++tot;
        S[a]=b;
    } 
    printf("%.2f",res);
}
pair<int,int>PII;
int main(){
    cin>>s>>p;
    for(int i=1;i<=p;i++){
        cin>>edge[i].y>>edge[i].x;
    }
    for(int i=1;i<=p;i++){
        for(int j=i+1;j<=p;j++){
            edge[cnt].u=i; edge[cnt].v=j;
            edge[cnt++].w=sqrt((coo[i].x-coo[j].x)*(coo[i].x-coo[j].x)+(coo[i].y-coo[j].y)*(coo[i].y-coo[j].y));
        }
    }
    Kruskal();
    return 0;
}

//D
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=2e5+10,M=1e5+10,INF=0x3f3f3f3f;
int n,m;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
struct node{
    int u,v,w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];
int sum=0;
void Kruskal(){
    sort(edge+1,edge+n+1);
    for(int i=1;i<=n;i++) S[i]=i;
    int res=0,tot=0;
    for(int i=1;i<=m;i++){
        if(tot==n-1) break;
        a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res+=edge[i].w;
        tot++;
        S[a]=b;
    }
    cout<<sum-res;
    return;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++){
        cin>>edge[i].u>>edge[i].v>>edge[i].w;
        sum+=edge[i].w;
        if(!edge[i].w) edge[i].w=INF;
    }
    Kruskal();
    return 0;
}

//E
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=2e3+5,M=1e4+5,INF=0x3f3f3f3f;
int n,m;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
struct node{
    int u,v,w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];

void Kruskal(){
    sort(edge+1,edge+m+1);
    for(int i=1;i<=n;i++) S[i]=i;
    int tot=0,res=0;
    for(int i=1;i<=m;i++){
        if(tot==n-1) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res=edge[i].w;
        tot++;
        S[a]=b;
    }
    cout<<res;
    return;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++) cin>>edge[i].u>>edge[i].v>>edge[i].w;
    Kruskal();
    return 0;
}

//F
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=1e5+10,M=1e5+10,INF=0x3f3f3f3f;
int n,m;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
struct node{
    int u,v,w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];
void Kruskal(){
    sort(edge+1,edge+m+1);
    for(int i=1;i<=n;i++) S[i]=i;
    int tot=0,res=0;
    for(int i=1;i<=m;i++){
        if(tot==n-1) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        res=edge[i].w;
        ++tot;
        S[a]=b;
    }
    cout<<res<<endl;
    return;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++) cin>>edge[i].u>>edge[i].v>>edge[i].w;
    Kruskal();
    return 0;
}

//G
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=1e3+10,M=N*N,INF=0x3f3f3f3f;
int n,k;
int S[N]={0};
int find_set(int x){
    if(S[x]!=x) S[x]=find_set(S[x]);
    return S[x];
}
int cnt=0;
struct node{
    int u,v; double w;
    bool operator <(const node &x){
        return w<x.w;
    }
}edge[M];
pair<double,double>coo[N];
void Kruskal(){
    sort(edge,edge+cnt);
    for(int i=1;i<=n;i++) S[i]=i;
    int tot=0;
    for(int i=1;i<=cnt;i++){
        if(tot==n-k) break;
        int a=find_set(edge[i].u),b=find_set(edge[i].v);
        if(a==b) continue;
        if(tot==n-k){
            printf("%.2f",edge[i].w);
            return;
        }
        ++tot;
        S[a]=b;
    }
    cout<<0;
    return;
}
int main(){
    cin>>n>>k;
    for(int i=1;i<=n;i++){
        cin>>coo[i].y>>coo[i].x;
    }
    for(int i=1;i<=n;i++){
        for(int j=i+1;j<=n;j++){
            edge[cnt].u=i; edge[cnt].v=j;
            edge[cnt++].w=sqrt((coo[i].x-coo[j].x)*(coo[i].x-coo[j].x)+(coo[i].y-coo[j].y)*(coo[i].y-coo[j].y));
        }
    }
    Kruskal();
    return 0;
}

//H
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;
const int N=1e5+10;
struct Edge{
    int to,nxt;
}edge[N<<1];
int head[N]={0},cnt=0,in_degree[N]={0};
void add_edge(int u,int v){
    edge[cnt].to=v; edge[cnt].nxt=head[u]; head[u]=cnt++;
    in_degree[v]++;
}
queue<int>q;
int res[N]={0};
int main(){
    int n,m; cin>>n>>m;
    for(int i=1;i<n;i++) head[i]=-1;
    for(int i=0;i<=m;i++) edge[i].nxt=-1;
    for(int i=1,a,b;i<=m;i++){
        cin>>a>>b;
        add_edge(a,b);
    }
    for(int i=1;i<=n;i++){
        if(!in_degree) {q.push(i); res[i]=1;}
    }
    while(q.size()){
        int now=q.front(); q.pop();
        int nxt_step=res[now]+1;
        for(int i=head[now];~i;i=edge[i].nxt){
            int nxt=edge[i].to;
            --in_degree[nxt];
        }
        if(!in_degree[nxt]){
            q.push(nxt);
            res[nxt]=nxt_step;        
        }
    }
    for(int i=1;i<=n;i++) cout<<res[i]<<" ";
    return 0;
}

//12-线段树

//A
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N=1e5+10;
const int INF=0x3f3f3f3f;
ll aa[N]; ll tree[N*4]={0};
inline int ls(int p) {return p<<1;}
inline int rs(int p) {return p<<1|1;}
void push_up(int p){
    tree[p]=tree[ls(p)]+tree[rs(p)];
}
void build(int p,int pl,int pr){
    if(pl==pr){
        tree[p]={0};
        return;
    }
    int mid=(pl+pr)>>1;
    build(ls(p),pl,mid);
    build(rs(p),mid+1,pr);
    push_up(p);
}
void update(int p,int pl,int pr,int x,ll d){
    if(pl==pr&&pl==x){
        tree[p]+=d;
        return;
    }
    int mid=(pl+pr)>>1;
    if(x<=mid) update(ls(p),pl,mid,x,d);
    else update(rs(p),mid+1,pr,x,d);
    push_up(p);
    return;
}
ll query(int p,int pl,int pr,int L,int R){
    ll res=0;
    if(L<=pl&&pr<=R) return tree[p];
    int mid=(pl+pr)>>1;
    if(L<=mid) res+=query(ls(p),pl,mid,L,R);
    if(R>mid) res+=query(rs(p),mid+1,pr,L,R);
    return res;
}
int main(){
    int n,w; cin>>n>>w;
    build(1,1,n);
    string op;
    ll a,b;
    while(w--){
        cin>>op>>a;
        if(op=="x") update(1,1,n,a,b);
        else cout<<query(1,1,n,a,b)<<endl;
    }
    return 0;
}

//B
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll N=1e5+5;
const ll INF=0x3f3f3f3f;
ll aa[N]; ll tree[N*4]={0}; ll tag[N<<2]={0};
int ls(int p){return p<<1;}
int rs(int p){return p<<1|1;}
void push_up(int p){
    tree[p]=tree[ls(p)]+tree[rs(p)];
}
void add_tag(int p,int pl,int pr,ll d){
    tag[p]+=d;
    tree[p]+=d*(pr-pl+1);
}
void push_down(int p,int pl,int pr){
    if(tag[p]){
        ll mid=(pl+pr)>>1;
        add_tag(ls(p),pl,mid,tag[p]);
        add_tag(rs(p),mid+1,pr,tag[p]);
        tag[p]=0;
    }
}
void build(int p,int pl,int pr){
    if(pl==pr){
        tree[p]=aa[pl];
        return;
    }
    int mid=(pl+pr)>>1;
    build(ls(p),pl,mid);
    build(rs(p),mid+1,pr);
    push_up(p);
}
void update(int p,int pl,int pr,ll L,ll R,ll d){
    if(L<=pl&&pr<=R){
        add_tag(p,pl,pr,d);
        return;
    }
    push_down(p,pl,pr);
    int mid=(pl+pr)>>1;
    if(L<=mid) update(ls(p),pl,mid,L,R,d);
    if(R>mid) update(rs(p),mid+1,pr,L,R,d);
    push_up(p);
    return;
}
ll query(int p,int pl,int pr,ll L,ll R){
    if(L<=pl&&pr<=R) return tree[p];
    push_down(p,pl,pr);
    ll res=0;
    ll mid=(pl+pr)>>1;
    if(L<=mid) res+=query(ls(p),pl,mid,L,R);
    if(R>mid) res+=query(rs(p),mid+1,pr,L,R);
    return res;
}
int main(){
    ll n,m; cin>>n>>m;
    for(int i=1;i<=n;i++) cin>>aa[i];
    build(1,1,n);
    for(int i=1,temp,x,y,k;i<=m;i++){
        cin>>temp;
        switch(temp){
            case 1:
                cin>>x>>y>>k;
                update(1,1,n,x,y,k);
                break;
            case 2:
                cin>>x>>y;
                cout<<query(1,1,n,x,y)<<endl;
                break;
        }
    }
    return 0;
}

//C
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N=1e5+10;
const int INF=0x3f3f3f3f;
ll n,T,MOD,MIN,MAX;
ll sub[N]={0};
int sum[N]={0};
int main(){
    cin>>n>>T>>MOD>>MIN>>MAX;
    while(T--){
        string S; cin>>S;
        if(S=="A"){
            ll L,R,X; cin>>L>>R>>X;
            sub[L]+=X;
            sub[R+1]-=X;
        }
        else{
            int L,R; cin>>L>>R;
            ll now=0,res=0;
            for(int i=1;i<=n;i++){
                now+=sub[i];
                if(now>=MIN&&now<=MAX) res++;
            }
            cout<<res<<endl;
        }
    }
    for(int i=1,now=0;i<=n;i++){
        now+=sub[i];
        ll temp=now*i%MOD;
        if(MIN<=temp&&temp<=MAX) sum[i]=sum[i-1]+1;
        else sum[i]=sum[i-1];
    }  
    int Final; cin>>Final;
    while(Final--){
        int L,R; cin>>L>>R;
        cout<<sum[R]-sum[L-1]<<endl;
    }
    return 0;
}

//D
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int C,S,W;
const int N=6e4+10;
int tree[N*4]={0};
int tag[N<<2]={0};
int ls(int p) {return p<<1;}
int rs(int p) {return p<<1|1;}
void push_up(int p){
    tree[p]=max(tree[ls(p)],tree[rs(p)]);
}
void add_tag(int p,int pl,int pr,int d){
    tag[p]+=d;
    tree[p]+=d;
}
void push_down(int p,int pl,int pr){
    if(tag[p]){
        ll mid=(pl+pr)>>1;
        add_tag(ls(p),pl,mid,tag[p]);
        add_tag(rs(p),mid+1,pr,tag[p]);
        tag[p]=0;
    }
}
void update(int p,int pl,int pr,int L,int R,int d){
    if(L<=pl&&pr<=R){
        add_tag(p,pl,pr,d);
        return;
    }
    push_down(p,pl,pr);
    int mid=(pl+pr)>>1;
    if(L<=mid) update(ls(p),pl,mid,L,R,d);
    if(R>mid) update(rs(p),mid+1,pr,L,R,d);
    push_up(p);
    return;
}
int main(){
    cin>>C>>S>>W;
    int O,D,N;
    while(W--){
        cin>>O>>D>>N;
        update(1,1,C-1,O,D-1,N);
        if(tree[1]<=S) cout<<"T\n";
        else{
            cout<<"N\n";
            update(1,1,C-1,1,O-1,-N);
        }
    }
    return 0;
}

//13-模拟

//A
#include <bits/stdc++.h>
using namespace std;
int res=1,n;
int main(){
    cin>>n;
    for(int i=1;i<n;i++){
        res=(res+1)*2;
    }
    cout<<res;
    return 0;
}

//B
#include <bits/stdc++.h>
using namespace std;
int f(int i,vector<int>&arr,int n){
    if(i>=n) return 0;
    return f(i+arr[i],arr,n)+1;
}

int main(){
    int n;
    vector<int>arr;
    for(int i=0,a;i<n;i++){
        cin>>a;
        arr.push_back(a);
    }
    cout<<f(0,arr,n)<<endl;
    return 0;
}

//C
#include <bits/stdc++.h>
using namespace std;
const int N=100010;
int order[N];
int prior[N];
int flag[N];
struct node{
    int time,id;
}a[N];
bool cmp(node a,node b){
    if(a.id==b.id) return a.time<b.time;
    return a.id<b.id;
}
int main(){
    int m,n,T; cin>>n>>m>>T;
    for(int i=0;i<m;i++){
        cin>>a[i].time>>a[i].id;
    }
    sort(a,a+m,cmp);
    for(int i=0;i<m;i++){
        int tt=a[i].time,id=a[i].id;
        if(tt!=order[id]) prior[id]-=tt-order[id]-1;
        prior[id]=prior[id]<0?0:prior[id];
        if(prior[id]<=3) flag[id]={0};
        prior[id]+=2;
        if(prior[id]>5) flag[id]=1;
        order[id]=tt;
    }
    for(int i=1;i<=n;i++){
        if(order[i]>T){
            prior[i]-=T-order[i];
            if(prior[i]<=3) flag[i]=0;
        }
    }
    int ans=0;
    for(int i=0;i<=n;i++){
        if(flag[i]) ans++;
    }
    cout<<ans;
    return 0;
}

//D
#include<bits/stdc++.h>
using namespace std;
bool check(int x){
    string s;
    while(x) s+=(char)(x%10+'0'),x/=10;
    int n=s.size();
    if(n%2==1) return false;
    int sum1=0,sum2=0;
    for(int i=0;i<n/2;i++){
        sum1+=s[i]-'0';
        sum2+=s[i+n/2]-'0';
    }
    return sum1==sum2;
}
int main(){
    int ans=0;
    for(int i=1;i<=100000000;i++){
        if(check(i)) ans++;
    }
    cout<<ans;
    return 0;
}


//E
#include<bits/stdc++.h>
using namespace std;
int num[110];
int days[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
int main(){
    for(int i=0;i<100;i++) cin>>num[i];
    set<int>ans;
    for(int i=0;i<100;i++)
        for(int j=i+1;j<100;j++)
            for(int k=j+1;k<100;k++)
                for(int v=k+1;v<100;v++)
                {
                    int y=num[i]*1000+num[j]*100+num[k]*10+num[v];
                    if(y==2023){
                        for(int m=v+1;m<100;m++)
                            for(int n=m+1;m<100;n++)
                                for(int o=n+1;o<100;o++)
                                    for(int p=o+1;p<100;p++)
                                    {
                                        int mon=num[m]*10+num[n];
                                        int d=num[v]*10+num[o];
                                        if((mon>=1&&mon<=12)&&d>=1&&d<=days[mon]){
                                            int temp=mon*100+d;
                                            ans.insert(temp);
                                        }
                                    }
                                    break;
                    }
                }
    cout<<ans.size();
    return 0;
}

//F
#include<bits/stdc++.h>
using namespace std;
int num[110];
int days[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
int main(){
    for(int i=0;i<100;i++) cin>>num[i];
    int ans=0;
    for(int i=1;i<=12;i++){
        for(int j=1;j<=days[i];j++){
            string str="2023";
            if(i<10) str+="0";
            str+=to_string(i);
            if(j<10) str+="0";
            str+=to_string(j);
            int k=0;
            for(int v=0;v<100&&j<8;v++){
                if(num[v]==str[k]-'0'){
                    k++;
                }
            if(k>=8) ans++;
            }
        }
    }
    cout<<ans;
    return 0;
}

//G
#include<bits/stdc++.h>
using namespace std;
int N=23333333;
double ans=11625907.5798;
double eps=1e4-4;
int main(){
    for(int v=0;v<N/2;v++){
        int u=N-v;
        double res=-1.0*u*u/N*log2(1.0*u/N)-1.0*v*v/N*log2(1.0*v/N);
        if(fabs(res-ans)<eps){
            cout<<v;
            break;
        }
    }
    return 0;
}

//H
#include<bits/stdc++.h>
using namespace std;
int year,month,day,h,m,s;
vector<int>days={0,31,28,31,30,31,30,31,31,30,31,30,31}；
int main(){
    while(scanf("%d-%d-%d %d:%d:%d",&year,&month,&day,&h,&m,&s)==6){
        int sum=0;
        for(int i=0;i<month,i++){
            sum+=days[i];
        }
        sum+=day;
        sum=sum*24+h; sum=sum*60+m; sum=sum*60+s;
        v.push_back(sum);
    }
    sort(v.begin(),v.end());
    int ans=0;
    for(int i=0;i<v.size();i+=2){
        ans+=v[i+1]-v[i];
    }
    cout<<ans;
    return 0;
}

//I
#include<bits/stdc++.h>
using namespace std;
int n,k,a[5000005];
int main(){
    cin>>n>>k;
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    sort(a+1,a+n+1);
    cout<<a[k+1];
    return 0;
}

//J
#include<bits/stdc++.h>
using namespace std;
int n,m,x,cnt[1005];
int main(){
    cin>>n>>m;
    for(int i=0;i<m;i++){
        cin>>x;
        cnt[x]++;
    }
    for(int i=1;i<=n;i++){
        cout<<i<<" ", cnt[i]--;
    }
    return 0;
}

    

















   


   


